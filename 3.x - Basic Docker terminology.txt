Архитектура Docker

    Что такое Docker?
    Docker - это платформа для разработки, доставки и запуска приложений в контейнерах. Контейнеры позволяют упаковывать приложение со всеми его зависимостями в стандартный исполняемый пакет.

    Отличие Docker от виртуальных машин:
        Виртуальные машины включают полноценную гостевую операционную систему, в то время как Docker использует хостовую ОС, что уменьшает накладные расходы и увеличивает производительность.
        Docker обеспечивает более легкий и быстрый способ изоляции приложений.

    Как Docker работает на Linux:
    Docker запускает контейнеры с использованием функций ядра Linux, таких как cgroups и namespaces, для изоляции и ограничения ресурсов.

    Процессы в Linux и их изоляция:
        Linux использует fork и execv для создания и выполнения новых процессов.
        Изоляция достигается с помощью chroot, позволяющая изменить корневую директорию для процесса, и namespaces, которые ограничивают видимость и взаимодействие процессов между собой.

    Компоненты Docker:
        Docker Engine: основной компонент, обеспечивающий работу контейнеров на хостовой машине.
        Docker CLI: интерфейс командной строки для взаимодействия с Docker Engine.
        Docker Images: шаблоны только для чтения, используемые для создания контейнеров.
        Docker Containers: запущенные экземпляры образов Docker.

    Преимущества использования Docker:
        Быстрая доставка и развертывание приложений благодаря легковесности и портативности контейнеров.
        Высокая производительность за счет меньших накладных расходов по сравнению с виртуальными машинами.
        Изоляция зависимостей позволяет упаковывать приложения вместе со всеми необходимыми библиотеками и сервисами.


Управление контейнерами

В этом уроке мы с вами будет играться с контейнером mongo. Так как после выхода моего курса вышла mongo версии 5, которая не совместима с определённой виртуализацией, для повторения работы с контейнерами я рекомендую использовать образ определённой версии. Для этого указывайте не mongo, а mongo:4.4.4.

Взаимодействие с объектами:

    Объекты в Docker: конфигурации, контейнеры, контексты, имиджи.
    Фокус на Docker Container.

Основные команды:

    docker help 
        показывает все доступные команды.
    Упрощение: docker start/stop вместо docker container start/stop.

Жизненный цикл контейнера:

    Создание: docker run скачивает имидж и создает из него контейнер.
    Запуск: Контейнер переходит в состояние Running.
    Остановка:
        docker stop 
            переводит контейнер в состояние Stopped.
        docker kill 
            альтернатива для остановки нереагирующего контейнера.
    Перезапуск:
        docker restart останавливает и снова запускает контейнер.
    Пауза/Возобновление:
        docker pause / docker unpause 
            пауза и возобновление работы контейнера.
    Удаление:
        docker remove 
            удаляет остановленный контейнер.
        docker remove --force 
            удаляет даже запущенный контейнер.

Важный аспект сохранения состояния:

    Контейнер имеет состояние (Stateful) до удаления: изменения в файловой системе контейнера сохраняются между запусками.

Практическое применение команд:

    Просмотр активных и остановленных контейнеров: docker ps, docker ps -a.
    Удаление контейнеров: docker rm [container_id/name].
    Работа со статусами: запуск, остановка, перезапуск, пауза, возобновление.
    docker prune 
        удаление всех остановленных контейнеров.
    docker rename [old_name] [new_name] 
        изменение имени контейнера.



Логи и статистика работы

1. Просмотр запущенных контейнеров:

    Пример с MongoDB.
    Использование команды docker stats для просмотра статистики по контейнерам (CPU, ОЗУ, сетевой трафик).

2. Детальный анализ контейнера:

    Использование docker inspect для получения подробной информации о контейнере в формате JSON (статус, ID процесса, объем использованной памяти).
    Применение форматирования для извлечения специфических данных (например, статуса контейнера).

3. Работа с логами контейнера:

    Команда docker logs для просмотра логов контейнера.
    Использование Linux команды grep для фильтрации логов (поиск заданных строк или ошибок).
    Использование параметров A и B с grep для отображения строк до и после найденных совпадений.
    Ограничение вывода результатов поиска в логах.

4. Продвинутые техники работы с логами:

    Слежение за новыми записями в лог с помощью флага -f.
    Сохранение логов в файл для дальнейшего использования или анализа.
    Комбинирование команд для выборки и сохранения нужной информации из логов в отдельный файл.


Команды в контейнере

Взаимодействие с Контейнерами Docker для Отладки

Цели:

    Исполнение команд внутри контейнера
    Проверка и отладка приложений в контейнере

Основные Команды:

    docker exec: Основная команда для запуска команд внутри контейнера.

Параметры docker exec:

    -i (интерактивный ввод)
    -t (псевдо TTY, для интерактивной shell)
    -d (запуск команды в фоновом режиме)
    -e (передача переменных окружения)
    -u (запуск от имени конкретного пользователя)
    -v (указание рабочей директории для выполнения команды)

Практическое Применение:

    Исполнение Простых Команд:
        Получение текущей рабочей директории: docker exec -v /root имя_контейнера pwd
        Вывод версии MongoDB: docker exec имя_контейнера mongo --version

    Работа с Переменными Окружения:
        Добавление и использование собственной переменной: docker exec -e MYVAR=1 имя_контейнера printenv MYVAR

    Интерактивный Режим:
        Запуск контейнера в интерактивном режиме: docker exec -it имя_контейнера bash

    Обработка Вывода Команд:
        Выполнение команды и сохранение вывода в файл внутри контейнера: 
        bash
        docker exec имя_контейнера bash -c 'mongo --version > mongo_version.txt'

    Управление Состоянием Контейнера:
        Невозможность взаимодействия с контейнером на паузе или остановленным: 
        bash
        docker pause имя_контейнера
        docker exec имя_контейнера команда # Выводит ошибку

Ключевые Замечания:

    Важно правильно использовать параметры команды docker exec для достижения желаемого результата.
    Вывод команд, которые должны выполняться внутри контейнера, необходимо управлять с учетом контекста выполнения (в контейнере или на хост-машине).
    Взаимодействие с контейнером возможно только если он находится в состоянии running.

Эта лекция посвящена изучению взаимодействия с работающими контейнерами Docker, что является ключевым навыком для отладки и управления контейнеризированными приложениями.


Упражнение - Работа с контейнерами

Шаги выполнения:
1. Создание контейнера

    Используем команду docker create для создания контейнера без его запуска.
    Пример: docker create --name mongodb mongo. Здесь мы создаем контейнер с именем "mongodb" из образа "mongo".

2. Запуск контейнера

    Запускаем созданный контейнер командой docker start.
    Пример: docker start mongodb. Это запустит контейнер с именем "mongodb".

3. Работа с файлами в контейнере

    С помощью команды docker exec добавляем файл в контейнер и взаимодействуем с ним.
    Пример добавления файла: docker exec mongodb touch /itslivetext.txt. Создается пустой файл "itslivetext.txt" в корне файловой системы контейнера "mongodb".

4. Проверка сохранности стейта контейнера

    Останавливаем контейнер командой docker stop mongodb и снова его запускаем с помощью docker start mongodb.
    Повторяем команду docker exec для проверки наличия файла "itslivetext.txt" после перезапуска контейнера.
    Пример проверки файла: docker exec mongodb ls /. Убеждаемся, что файл "itslivetext.txt" присутствует в списке, подтверждая сохранность стейта контейнера.

5. Интерактивный доступ к контейнеру

    Для более глубокого взаимодействия с контейнером используем команду docker exec -it mongodb bash, чтобы открыть bash-терминал внутри контейнера и вручную управлять его файлами и настройками.


Цель Упражнения:
Целью этого упражнения является практическое закрепление знаний по базовым понятиям Docker, используя контейнер Grafana.

Шаги Упражнения:

    1. Запуск контейнера Grafana:
        Запустите контейнер Grafana в фоновом режиме.
	https://hub.docker.com/r/grafana/grafana
	docker run -d --name=grafana -p 3000:3000 grafana/grafana

    2. Наблюдение за контейнером:
        Проверьте, какие ресурсы использует контейнер.
	docker stats
	docker inspect Grafana

    3. Работа с логами и переменными окружения:
        Сохраните логи запуска контейнера в файл с именем log.txt.
	docker logs grafana > log.txt

        Сохраните переменные окружения контейнера в файл env.txt.
	docker exec grafana printenv > env.txt

    4. Взаимодействие с контейнером:
        Используйте команду exec для входа в контейнер.
	docker exec -it grafana bash

        Откройте список администраторов командой через grafana.cli.
	grafana cli admin

        Измените пароль пользователя Grafana с помощью grafana.cli admin reset-admin-password.
	grafana cli admin reset-admin-password 123

    5. Как скопировать файлы с виртуальной машины на хост-машину:
	Для копирования файлов (на примере файла env.txt) откройте консоль на хост-машине дайте команду
	scp -P2222 user123@127.0.0.1:/home/user123/env.txt .

	По этой команде, через SSH подключение на порту 2222 будет взят файл "/home/user123/env.txt" (путь /home/user123 является домашней папкой удаленного пользователя) и скопирован в текущую папку пользователя на хост-машине (по умолчанию для PowerShell это C:\Users\<username>)


